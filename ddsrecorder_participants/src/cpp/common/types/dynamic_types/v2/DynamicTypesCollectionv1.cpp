// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DynamicTypesCollection.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <ddsrecorder_participants/common/types/dynamic_types/v2/DynamicTypesCollection.hpp>

#if FASTCDR_VERSION_MAJOR == 1

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

namespace helper {
namespace internal {

enum class Size
{
    UInt8,
    UInt16,
    UInt32,
    UInt64,
};

constexpr Size get_size(
        int s)
{
    return (s <= 8 ) ? Size::UInt8:
           (s <= 16) ? Size::UInt16:
           (s <= 32) ? Size::UInt32: Size::UInt64;
}

template<Size s>
struct FindTypeH;

template<>
struct FindTypeH<Size::UInt8>
{
    using type = std::uint8_t;
};

template<>
struct FindTypeH<Size::UInt16>
{
    using type = std::uint16_t;
};

template<>
struct FindTypeH<Size::UInt32>
{
    using type = std::uint32_t;
};

template<>
struct FindTypeH<Size::UInt64>
{
    using type = std::uint64_t;
};
} // namespace internal

template<int S>
struct FindType
{
    using type = typename internal::FindTypeH<internal::get_size(S)>::type;
};
} // namespace helper

#define eprosima_ddsrecorder_participants_DynamicTypesCollection_max_cdr_typesize 78412ULL;
#define eprosima_ddsrecorder_participants_DynamicType_max_cdr_typesize 784ULL;


namespace eprosima {

namespace ddsrecorder {

namespace participants {



DynamicType::DynamicType()
{
    // /type_d() m_type_name

    // /type_d() m_type_information

    // /type_d() m_type_object


}

DynamicType::~DynamicType()
{
}

DynamicType::DynamicType(
        const DynamicType& x)
{
    m_type_name = x.m_type_name;


    m_type_information = x.m_type_information;


    m_type_object = x.m_type_object;

}

DynamicType::DynamicType(
        DynamicType&& x) noexcept
{
    m_type_name = std::move(x.m_type_name);


    m_type_information = std::move(x.m_type_information);


    m_type_object = std::move(x.m_type_object);

}

DynamicType& DynamicType::operator =(
        const DynamicType& x)
{
    m_type_name = x.m_type_name;


    m_type_information = x.m_type_information;


    m_type_object = x.m_type_object;

    return *this;
}

DynamicType& DynamicType::operator =(
        DynamicType&& x) noexcept
{
    m_type_name = std::move(x.m_type_name);


    m_type_information = std::move(x.m_type_information);


    m_type_object = std::move(x.m_type_object);

    return *this;
}

bool DynamicType::operator ==(
        const DynamicType& x) const
{
    return (m_type_name == x.m_type_name &&
           m_type_information == x.m_type_information &&
           m_type_object == x.m_type_object);
}

bool DynamicType::operator !=(
        const DynamicType& x) const
{
    return !(*this == x);
}

size_t DynamicType::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_ddsrecorder_participants_DynamicType_max_cdr_typesize;
}

size_t DynamicType::getCdrSerializedSize(
        const DynamicType& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.type_name().size() + 1;


    current_alignment += 4 +
            eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.type_information().size() + 1;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.type_object().size() + 1;


    return current_alignment - initial_alignment;
}

void DynamicType::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_type_name.c_str();

    scdr << m_type_information.c_str();

    scdr << m_type_object.c_str();

}

void DynamicType::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_type_name;



    dcdr >> m_type_information;



    dcdr >> m_type_object;


}

bool DynamicType::isKeyDefined()
{
    return false;
}

void DynamicType::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member type_name
 * @param _type_name New value to be copied in member type_name
 */
void DynamicType::type_name(
        const std::string& _type_name)
{
    m_type_name = _type_name;
}

/*!
 * @brief This function moves the value in member type_name
 * @param _type_name New value to be moved in member type_name
 */
void DynamicType::type_name(
        std::string&& _type_name)
{
    m_type_name = std::move(_type_name);
}

/*!
 * @brief This function returns a constant reference to member type_name
 * @return Constant reference to member type_name
 */
const std::string& DynamicType::type_name() const
{
    return m_type_name;
}

/*!
 * @brief This function returns a reference to member type_name
 * @return Reference to member type_name
 */
std::string& DynamicType::type_name()
{
    return m_type_name;
}

/*!
 * @brief This function copies the value in member type_information
 * @param _type_information New value to be copied in member type_information
 */
void DynamicType::type_information(
        const std::string& _type_information)
{
    m_type_information = _type_information;
}

/*!
 * @brief This function moves the value in member type_information
 * @param _type_information New value to be moved in member type_information
 */
void DynamicType::type_information(
        std::string&& _type_information)
{
    m_type_information = std::move(_type_information);
}

/*!
 * @brief This function returns a constant reference to member type_information
 * @return Constant reference to member type_information
 */
const std::string& DynamicType::type_information() const
{
    return m_type_information;
}

/*!
 * @brief This function returns a reference to member type_information
 * @return Reference to member type_information
 */
std::string& DynamicType::type_information()
{
    return m_type_information;
}

/*!
 * @brief This function copies the value in member type_object
 * @param _type_object New value to be copied in member type_object
 */
void DynamicType::type_object(
        const std::string& _type_object)
{
    m_type_object = _type_object;
}

/*!
 * @brief This function moves the value in member type_object
 * @param _type_object New value to be moved in member type_object
 */
void DynamicType::type_object(
        std::string&& _type_object)
{
    m_type_object = std::move(_type_object);
}

/*!
 * @brief This function returns a constant reference to member type_object
 * @return Constant reference to member type_object
 */
const std::string& DynamicType::type_object() const
{
    return m_type_object;
}

/*!
 * @brief This function returns a reference to member type_object
 * @return Reference to member type_object
 */
std::string& DynamicType::type_object()
{
    return m_type_object;
}

DynamicTypesCollection::DynamicTypesCollection()
{
    // sequence<eprosima::ddsrecorder::participants::DynamicType> m_dynamic_types


}

DynamicTypesCollection::~DynamicTypesCollection()
{
}

DynamicTypesCollection::DynamicTypesCollection(
        const DynamicTypesCollection& x)
{
    m_dynamic_types = x.m_dynamic_types;

}

DynamicTypesCollection::DynamicTypesCollection(
        DynamicTypesCollection&& x) noexcept
{
    m_dynamic_types = std::move(x.m_dynamic_types);

}

DynamicTypesCollection& DynamicTypesCollection::operator =(
        const DynamicTypesCollection& x)
{
    m_dynamic_types = x.m_dynamic_types;

    return *this;
}

DynamicTypesCollection& DynamicTypesCollection::operator =(
        DynamicTypesCollection&& x) noexcept
{
    m_dynamic_types = std::move(x.m_dynamic_types);

    return *this;
}

bool DynamicTypesCollection::operator ==(
        const DynamicTypesCollection& x) const
{
    return (m_dynamic_types == x.m_dynamic_types);
}

bool DynamicTypesCollection::operator !=(
        const DynamicTypesCollection& x) const
{
    return !(*this == x);
}

size_t DynamicTypesCollection::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_ddsrecorder_participants_DynamicTypesCollection_max_cdr_typesize;
}

size_t DynamicTypesCollection::getCdrSerializedSize(
        const DynamicTypesCollection& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < data.dynamic_types().size(); ++a)
    {
        current_alignment += eprosima::ddsrecorder::participants::DynamicType::getCdrSerializedSize(
            data.dynamic_types().at(a), current_alignment);
    }



    return current_alignment - initial_alignment;
}

void DynamicTypesCollection::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_dynamic_types;


}

void DynamicTypesCollection::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_dynamic_types;


}

bool DynamicTypesCollection::isKeyDefined()
{
    return false;
}

void DynamicTypesCollection::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member dynamic_types
 * @param _dynamic_types New value to be copied in member dynamic_types
 */
void DynamicTypesCollection::dynamic_types(
        const std::vector<eprosima::ddsrecorder::participants::DynamicType>& _dynamic_types)
{
    m_dynamic_types = _dynamic_types;
}

/*!
 * @brief This function moves the value in member dynamic_types
 * @param _dynamic_types New value to be moved in member dynamic_types
 */
void DynamicTypesCollection::dynamic_types(
        std::vector<eprosima::ddsrecorder::participants::DynamicType>&& _dynamic_types)
{
    m_dynamic_types = std::move(_dynamic_types);
}

/*!
 * @brief This function returns a constant reference to member dynamic_types
 * @return Constant reference to member dynamic_types
 */
const std::vector<eprosima::ddsrecorder::participants::DynamicType>& DynamicTypesCollection::dynamic_types() const
{
    return m_dynamic_types;
}

/*!
 * @brief This function returns a reference to member dynamic_types
 * @return Reference to member dynamic_types
 */
std::vector<eprosima::ddsrecorder::participants::DynamicType>& DynamicTypesCollection::dynamic_types()
{
    return m_dynamic_types;
}

} // namespace participants


} // namespace ddsrecorder


} // namespace eprosima

#endif // FASTCDR_VERSION_MAJOR == 1
