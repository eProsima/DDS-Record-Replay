// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsRecorderStatusTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "DdsRecorderStatus.h"
#include "DdsRecorderStatusTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerDdsRecorderStatusTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
    factory->add_type_object("DdsRecorderStatus", GetDdsRecorderStatusIdentifier(true),
    GetDdsRecorderStatusObject(true));
    factory->add_type_object("DdsRecorderStatus", GetDdsRecorderStatusIdentifier(false),
    GetDdsRecorderStatusObject(false));

}

const TypeIdentifier* GetDdsRecorderStatusIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("DdsRecorderStatus", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetDdsRecorderStatusObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("DdsRecorderStatus", complete);
}

const TypeObject* GetDdsRecorderStatusObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DdsRecorderStatus", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteDdsRecorderStatusObject();
    }
    //else
    return GetMinimalDdsRecorderStatusObject();
}

const TypeObject* GetMinimalDdsRecorderStatusObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DdsRecorderStatus", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_previous;
    mst_previous.common().member_id(memberId++);
    mst_previous.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_previous.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_previous.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_previous.common().member_flags().IS_OPTIONAL(false);
    mst_previous.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_previous.common().member_flags().IS_KEY(false);
    mst_previous.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_previous.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 previous_hash("previous");
    for(int i = 0; i < 4; ++i)
    {
        mst_previous.detail().name_hash()[i] = previous_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_previous);

    MinimalStructMember mst_current;
    mst_current.common().member_id(memberId++);
    mst_current.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_current.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_current.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_current.common().member_flags().IS_OPTIONAL(false);
    mst_current.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_current.common().member_flags().IS_KEY(false);
    mst_current.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_current.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 current_hash("current");
    for(int i = 0; i < 4; ++i)
    {
        mst_current.detail().name_hash()[i] = current_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_current);

    MinimalStructMember mst_info;
    mst_info.common().member_id(memberId++);
    mst_info.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_info.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_info.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_info.common().member_flags().IS_OPTIONAL(false);
    mst_info.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_info.common().member_flags().IS_KEY(false);
    mst_info.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_info.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 info_hash("info");
    for(int i = 0; i < 4; ++i)
    {
        mst_info.detail().name_hash()[i] = info_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_info);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DdsRecorderStatus", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DdsRecorderStatus", false);
}

const TypeObject* GetCompleteDdsRecorderStatusObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DdsRecorderStatus", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_previous;
    cst_previous.common().member_id(memberId++);
    cst_previous.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_previous.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_previous.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_previous.common().member_flags().IS_OPTIONAL(false);
    cst_previous.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_previous.common().member_flags().IS_KEY(false);
    cst_previous.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_previous.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_previous.detail().name("previous");

    type_object->complete().struct_type().member_seq().emplace_back(cst_previous);

    CompleteStructMember cst_current;
    cst_current.common().member_id(memberId++);
    cst_current.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_current.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_current.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_current.common().member_flags().IS_OPTIONAL(false);
    cst_current.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_current.common().member_flags().IS_KEY(false);
    cst_current.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_current.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_current.detail().name("current");

    type_object->complete().struct_type().member_seq().emplace_back(cst_current);

    CompleteStructMember cst_info;
    cst_info.common().member_id(memberId++);
    cst_info.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_info.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_info.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_info.common().member_flags().IS_OPTIONAL(false);
    cst_info.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_info.common().member_flags().IS_KEY(false);
    cst_info.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_info.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_info.detail().name("info");

    type_object->complete().struct_type().member_seq().emplace_back(cst_info);


    // Header
    type_object->complete().struct_type().header().detail().type_name("DdsRecorderStatus");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DdsRecorderStatus", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DdsRecorderStatus", true);
}
