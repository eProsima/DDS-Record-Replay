// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsRecorderCommand.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DDSRECORDERCOMMAND_HPP_
#define _FAST_DDS_GENERATED_DDSRECORDERCOMMAND_HPP_

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DDSRECORDERCOMMAND_SOURCE)
#define DDSRECORDERCOMMAND_DllAPI __declspec( dllexport )
#else
#define DDSRECORDERCOMMAND_DllAPI __declspec( dllimport )
#endif // DDSRECORDERCOMMAND_SOURCE
#else
#define DDSRECORDERCOMMAND_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DDSRECORDERCOMMAND_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure DdsRecorderCommand defined by the user in the IDL file.
 * @ingroup DdsRecorderCommand
 */
class DdsRecorderCommand
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DdsRecorderCommand()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DdsRecorderCommand()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DdsRecorderCommand that will be copied.
     */
    eProsima_user_DllExport DdsRecorderCommand(
            const DdsRecorderCommand& x)
    {
                    m_command = x.m_command;

                    m_args = x.m_args;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DdsRecorderCommand that will be copied.
     */
    eProsima_user_DllExport DdsRecorderCommand(
            DdsRecorderCommand&& x) noexcept
    {
        m_command = std::move(x.m_command);
        m_args = std::move(x.m_args);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DdsRecorderCommand that will be copied.
     */
    eProsima_user_DllExport DdsRecorderCommand& operator =(
            const DdsRecorderCommand& x)
    {

                    m_command = x.m_command;

                    m_args = x.m_args;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DdsRecorderCommand that will be copied.
     */
    eProsima_user_DllExport DdsRecorderCommand& operator =(
            DdsRecorderCommand&& x) noexcept
    {

        m_command = std::move(x.m_command);
        m_args = std::move(x.m_args);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x DdsRecorderCommand object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DdsRecorderCommand& x) const
    {
        return (m_command == x.m_command &&
           m_args == x.m_args);
    }

    /*!
     * @brief Comparison operator.
     * @param x DdsRecorderCommand object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DdsRecorderCommand& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member command
     * @param _command New value to be copied in member command
     */
    eProsima_user_DllExport void command(
            const std::string& _command)
    {
        m_command = _command;
    }

    /*!
     * @brief This function moves the value in member command
     * @param _command New value to be moved in member command
     */
    eProsima_user_DllExport void command(
            std::string&& _command)
    {
        m_command = std::move(_command);
    }

    /*!
     * @brief This function returns a constant reference to member command
     * @return Constant reference to member command
     */
    eProsima_user_DllExport const std::string& command() const
    {
        return m_command;
    }

    /*!
     * @brief This function returns a reference to member command
     * @return Reference to member command
     */
    eProsima_user_DllExport std::string& command()
    {
        return m_command;
    }


    /*!
     * @brief This function copies the value in member args
     * @param _args New value to be copied in member args
     */
    eProsima_user_DllExport void args(
            const std::string& _args)
    {
        m_args = _args;
    }

    /*!
     * @brief This function moves the value in member args
     * @param _args New value to be moved in member args
     */
    eProsima_user_DllExport void args(
            std::string&& _args)
    {
        m_args = std::move(_args);
    }

    /*!
     * @brief This function returns a constant reference to member args
     * @return Constant reference to member args
     */
    eProsima_user_DllExport const std::string& args() const
    {
        return m_args;
    }

    /*!
     * @brief This function returns a reference to member args
     * @return Reference to member args
     */
    eProsima_user_DllExport std::string& args()
    {
        return m_args;
    }



private:

    std::string m_command;
    std::string m_args;

};

#endif // _FAST_DDS_GENERATED_DDSRECORDERCOMMAND_HPP_


