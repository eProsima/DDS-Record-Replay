// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CompleteTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "CompleteTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Complete.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Timestamp_type_identifier(
        TypeIdentifierPair& type_ids_Timestamp)
{

    ReturnCode_t return_code_Timestamp {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Timestamp =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Timestamp", type_ids_Timestamp);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Timestamp)
    {
        StructTypeFlag struct_flags_Timestamp = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Timestamp = "Timestamp";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Timestamp;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Timestamp;
        CompleteTypeDetail detail_Timestamp = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Timestamp, ann_custom_Timestamp, type_name_Timestamp.to_string());
        CompleteStructHeader header_Timestamp;
        header_Timestamp = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Timestamp);
        CompleteStructMemberSeq member_seq_Timestamp;
        {
            TypeIdentifierPair type_ids_seconds;
            ReturnCode_t return_code_seconds {eprosima::fastdds::dds::RETCODE_OK};
            return_code_seconds =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_seconds);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_seconds)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "seconds Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_seconds = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_seconds = 0x00000000;
            bool common_seconds_ec {false};
            CommonStructMember common_seconds {TypeObjectUtils::build_common_struct_member(member_id_seconds, member_flags_seconds, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_seconds, common_seconds_ec))};
            if (!common_seconds_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure seconds member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_seconds = "seconds";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_seconds;
            ann_custom_Timestamp.reset();
            CompleteMemberDetail detail_seconds = TypeObjectUtils::build_complete_member_detail(name_seconds, member_ann_builtin_seconds, ann_custom_Timestamp);
            CompleteStructMember member_seconds = TypeObjectUtils::build_complete_struct_member(common_seconds, detail_seconds);
            TypeObjectUtils::add_complete_struct_member(member_seq_Timestamp, member_seconds);
        }
        {
            TypeIdentifierPair type_ids_milliseconds;
            ReturnCode_t return_code_milliseconds {eprosima::fastdds::dds::RETCODE_OK};
            return_code_milliseconds =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_milliseconds);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_milliseconds)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "milliseconds Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_milliseconds = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_milliseconds = 0x00000001;
            bool common_milliseconds_ec {false};
            CommonStructMember common_milliseconds {TypeObjectUtils::build_common_struct_member(member_id_milliseconds, member_flags_milliseconds, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_milliseconds, common_milliseconds_ec))};
            if (!common_milliseconds_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure milliseconds member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_milliseconds = "milliseconds";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_milliseconds;
            ann_custom_Timestamp.reset();
            CompleteMemberDetail detail_milliseconds = TypeObjectUtils::build_complete_member_detail(name_milliseconds, member_ann_builtin_milliseconds, ann_custom_Timestamp);
            CompleteStructMember member_milliseconds = TypeObjectUtils::build_complete_struct_member(common_milliseconds, detail_milliseconds);
            TypeObjectUtils::add_complete_struct_member(member_seq_Timestamp, member_milliseconds);
        }
        CompleteStructType struct_type_Timestamp = TypeObjectUtils::build_complete_struct_type(struct_flags_Timestamp, header_Timestamp, member_seq_Timestamp);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Timestamp, type_name_Timestamp.to_string(), type_ids_Timestamp))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Timestamp already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Point_type_identifier(
        TypeIdentifierPair& type_ids_Point)
{

    ReturnCode_t return_code_Point {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Point =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Point", type_ids_Point);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Point)
    {
        StructTypeFlag struct_flags_Point = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Point = "Point";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Point;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Point;
        CompleteTypeDetail detail_Point = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Point, ann_custom_Point, type_name_Point.to_string());
        CompleteStructHeader header_Point;
        header_Point = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Point);
        CompleteStructMemberSeq member_seq_Point;
        {
            TypeIdentifierPair type_ids_x;
            ReturnCode_t return_code_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_x)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "x Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_x = 0x00000000;
            bool common_x_ec {false};
            CommonStructMember common_x {TypeObjectUtils::build_common_struct_member(member_id_x, member_flags_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_x, common_x_ec))};
            if (!common_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_x = "x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_x;
            ann_custom_Point.reset();
            CompleteMemberDetail detail_x = TypeObjectUtils::build_complete_member_detail(name_x, member_ann_builtin_x, ann_custom_Point);
            CompleteStructMember member_x = TypeObjectUtils::build_complete_struct_member(common_x, detail_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_Point, member_x);
        }
        {
            TypeIdentifierPair type_ids_y;
            ReturnCode_t return_code_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_y)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "y Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_y = 0x00000001;
            bool common_y_ec {false};
            CommonStructMember common_y {TypeObjectUtils::build_common_struct_member(member_id_y, member_flags_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_y, common_y_ec))};
            if (!common_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_y = "y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_y;
            ann_custom_Point.reset();
            CompleteMemberDetail detail_y = TypeObjectUtils::build_complete_member_detail(name_y, member_ann_builtin_y, ann_custom_Point);
            CompleteStructMember member_y = TypeObjectUtils::build_complete_struct_member(common_y, detail_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_Point, member_y);
        }
        {
            TypeIdentifierPair type_ids_z;
            ReturnCode_t return_code_z {eprosima::fastdds::dds::RETCODE_OK};
            return_code_z =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_z);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_z)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "z Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_z = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_z = 0x00000002;
            bool common_z_ec {false};
            CommonStructMember common_z {TypeObjectUtils::build_common_struct_member(member_id_z, member_flags_z, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_z, common_z_ec))};
            if (!common_z_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure z member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_z = "z";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_z;
            ann_custom_Point.reset();
            CompleteMemberDetail detail_z = TypeObjectUtils::build_complete_member_detail(name_z, member_ann_builtin_z, ann_custom_Point);
            CompleteStructMember member_z = TypeObjectUtils::build_complete_struct_member(common_z, detail_z);
            TypeObjectUtils::add_complete_struct_member(member_seq_Point, member_z);
        }
        CompleteStructType struct_type_Point = TypeObjectUtils::build_complete_struct_type(struct_flags_Point, header_Point, member_seq_Point);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Point, type_name_Point.to_string(), type_ids_Point))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Point already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MessageDescriptor_type_identifier(
        TypeIdentifierPair& type_ids_MessageDescriptor)
{

    ReturnCode_t return_code_MessageDescriptor {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MessageDescriptor =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MessageDescriptor", type_ids_MessageDescriptor);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MessageDescriptor)
    {
        StructTypeFlag struct_flags_MessageDescriptor = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MessageDescriptor = "MessageDescriptor";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MessageDescriptor;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MessageDescriptor;
        CompleteTypeDetail detail_MessageDescriptor = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MessageDescriptor, ann_custom_MessageDescriptor, type_name_MessageDescriptor.to_string());
        CompleteStructHeader header_MessageDescriptor;
        header_MessageDescriptor = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MessageDescriptor);
        CompleteStructMemberSeq member_seq_MessageDescriptor;
        {
            TypeIdentifierPair type_ids_id;
            ReturnCode_t return_code_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_id = 0x00000000;
            bool common_id_ec {false};
            CommonStructMember common_id {TypeObjectUtils::build_common_struct_member(member_id_id, member_flags_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_id, common_id_ec))};
            if (!common_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_id = "id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_id;
            ann_custom_MessageDescriptor.reset();
            CompleteMemberDetail detail_id = TypeObjectUtils::build_complete_member_detail(name_id, member_ann_builtin_id, ann_custom_MessageDescriptor);
            CompleteStructMember member_id = TypeObjectUtils::build_complete_struct_member(common_id, detail_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_MessageDescriptor, member_id);
        }
        {
            TypeIdentifierPair type_ids_topic;
            ReturnCode_t return_code_topic {eprosima::fastdds::dds::RETCODE_OK};
            return_code_topic =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_topic);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_topic)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_topic))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_topic = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_topic = 0x00000001;
            bool common_topic_ec {false};
            CommonStructMember common_topic {TypeObjectUtils::build_common_struct_member(member_id_topic, member_flags_topic, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_topic, common_topic_ec))};
            if (!common_topic_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure topic member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_topic = "topic";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_topic;
            ann_custom_MessageDescriptor.reset();
            CompleteMemberDetail detail_topic = TypeObjectUtils::build_complete_member_detail(name_topic, member_ann_builtin_topic, ann_custom_MessageDescriptor);
            CompleteStructMember member_topic = TypeObjectUtils::build_complete_struct_member(common_topic, detail_topic);
            TypeObjectUtils::add_complete_struct_member(member_seq_MessageDescriptor, member_topic);
        }
        {
            TypeIdentifierPair type_ids_time;
            ReturnCode_t return_code_time {eprosima::fastdds::dds::RETCODE_OK};
            return_code_time =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Timestamp", type_ids_time);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_time)
            {
            ::register_Timestamp_type_identifier(type_ids_time);
            }
            StructMemberFlag member_flags_time = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_time = 0x00000002;
            bool common_time_ec {false};
            CommonStructMember common_time {TypeObjectUtils::build_common_struct_member(member_id_time, member_flags_time, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_time, common_time_ec))};
            if (!common_time_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure time member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_time = "time";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_time;
            ann_custom_MessageDescriptor.reset();
            CompleteMemberDetail detail_time = TypeObjectUtils::build_complete_member_detail(name_time, member_ann_builtin_time, ann_custom_MessageDescriptor);
            CompleteStructMember member_time = TypeObjectUtils::build_complete_struct_member(common_time, detail_time);
            TypeObjectUtils::add_complete_struct_member(member_seq_MessageDescriptor, member_time);
        }
        CompleteStructType struct_type_MessageDescriptor = TypeObjectUtils::build_complete_struct_type(struct_flags_MessageDescriptor, header_MessageDescriptor, member_seq_MessageDescriptor);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MessageDescriptor, type_name_MessageDescriptor.to_string(), type_ids_MessageDescriptor))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MessageDescriptor already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Message_type_identifier(
        TypeIdentifierPair& type_ids_Message)
{

    ReturnCode_t return_code_Message {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Message =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Message", type_ids_Message);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Message)
    {
        StructTypeFlag struct_flags_Message = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Message = "Message";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Message;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Message;
        CompleteTypeDetail detail_Message = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Message, ann_custom_Message, type_name_Message.to_string());
        CompleteStructHeader header_Message;
        header_Message = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Message);
        CompleteStructMemberSeq member_seq_Message;
        {
            TypeIdentifierPair type_ids_descriptor;
            ReturnCode_t return_code_descriptor {eprosima::fastdds::dds::RETCODE_OK};
            return_code_descriptor =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MessageDescriptor", type_ids_descriptor);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_descriptor)
            {
            ::register_MessageDescriptor_type_identifier(type_ids_descriptor);
            }
            StructMemberFlag member_flags_descriptor = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_descriptor = 0x00000000;
            bool common_descriptor_ec {false};
            CommonStructMember common_descriptor {TypeObjectUtils::build_common_struct_member(member_id_descriptor, member_flags_descriptor, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_descriptor, common_descriptor_ec))};
            if (!common_descriptor_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure descriptor member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_descriptor = "descriptor";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_descriptor;
            ann_custom_Message.reset();
            CompleteMemberDetail detail_descriptor = TypeObjectUtils::build_complete_member_detail(name_descriptor, member_ann_builtin_descriptor, ann_custom_Message);
            CompleteStructMember member_descriptor = TypeObjectUtils::build_complete_struct_member(common_descriptor, detail_descriptor);
            TypeObjectUtils::add_complete_struct_member(member_seq_Message, member_descriptor);
        }
        {
            TypeIdentifierPair type_ids_message;
            ReturnCode_t return_code_message {eprosima::fastdds::dds::RETCODE_OK};
            return_code_message =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_message);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_message)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_message))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_message = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_message = 0x00000001;
            bool common_message_ec {false};
            CommonStructMember common_message {TypeObjectUtils::build_common_struct_member(member_id_message, member_flags_message, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_message, common_message_ec))};
            if (!common_message_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure message member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_message = "message";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_message;
            ann_custom_Message.reset();
            CompleteMemberDetail detail_message = TypeObjectUtils::build_complete_member_detail(name_message, member_ann_builtin_message, ann_custom_Message);
            CompleteStructMember member_message = TypeObjectUtils::build_complete_struct_member(common_message, detail_message);
            TypeObjectUtils::add_complete_struct_member(member_seq_Message, member_message);
        }
        CompleteStructType struct_type_Message = TypeObjectUtils::build_complete_struct_type(struct_flags_Message, header_Message, member_seq_Message);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Message, type_name_Message.to_string(), type_ids_Message))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Message already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_CompleteData_type_identifier(
        TypeIdentifierPair& type_ids_CompleteData)
{

    ReturnCode_t return_code_CompleteData {eprosima::fastdds::dds::RETCODE_OK};
    return_code_CompleteData =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "CompleteData", type_ids_CompleteData);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_CompleteData)
    {
        StructTypeFlag struct_flags_CompleteData = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_CompleteData = "CompleteData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_CompleteData;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_CompleteData;
        CompleteTypeDetail detail_CompleteData = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_CompleteData, ann_custom_CompleteData, type_name_CompleteData.to_string());
        CompleteStructHeader header_CompleteData;
        header_CompleteData = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_CompleteData);
        CompleteStructMemberSeq member_seq_CompleteData;
        {
            TypeIdentifierPair type_ids_index;
            ReturnCode_t return_code_index {eprosima::fastdds::dds::RETCODE_OK};
            return_code_index =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_index);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_index = 0x00000000;
            bool common_index_ec {false};
            CommonStructMember common_index {TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, common_index_ec))};
            if (!common_index_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_CompleteData.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_CompleteData);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_CompleteData, member_index);
        }
        {
            TypeIdentifierPair type_ids_main_point;
            ReturnCode_t return_code_main_point {eprosima::fastdds::dds::RETCODE_OK};
            return_code_main_point =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Point", type_ids_main_point);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_main_point)
            {
            ::register_Point_type_identifier(type_ids_main_point);
            }
            StructMemberFlag member_flags_main_point = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_main_point = 0x00000001;
            bool common_main_point_ec {false};
            CommonStructMember common_main_point {TypeObjectUtils::build_common_struct_member(member_id_main_point, member_flags_main_point, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_main_point, common_main_point_ec))};
            if (!common_main_point_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure main_point member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_main_point = "main_point";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_main_point;
            ann_custom_CompleteData.reset();
            CompleteMemberDetail detail_main_point = TypeObjectUtils::build_complete_member_detail(name_main_point, member_ann_builtin_main_point, ann_custom_CompleteData);
            CompleteStructMember member_main_point = TypeObjectUtils::build_complete_struct_member(common_main_point, detail_main_point);
            TypeObjectUtils::add_complete_struct_member(member_seq_CompleteData, member_main_point);
        }
        {
            TypeIdentifierPair type_ids_internal_data;
            ReturnCode_t return_code_internal_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_internal_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_Point_unbounded", type_ids_internal_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_internal_data)
            {
                return_code_internal_data =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Point", type_ids_internal_data);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_internal_data)
                {
                ::register_Point_type_identifier(type_ids_internal_data);
                }
                bool element_identifier_anonymous_sequence_Point_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_Point_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_internal_data, element_identifier_anonymous_sequence_Point_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_Point_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_Point_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_internal_data.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_Point_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_Point_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_Point_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_Point_unbounded, element_flags_anonymous_sequence_Point_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_Point_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_Point_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_Point_unbounded", type_ids_internal_data))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_Point_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_internal_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_internal_data = 0x00000002;
            bool common_internal_data_ec {false};
            CommonStructMember common_internal_data {TypeObjectUtils::build_common_struct_member(member_id_internal_data, member_flags_internal_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_internal_data, common_internal_data_ec))};
            if (!common_internal_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure internal_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_internal_data = "internal_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_internal_data;
            ann_custom_CompleteData.reset();
            CompleteMemberDetail detail_internal_data = TypeObjectUtils::build_complete_member_detail(name_internal_data, member_ann_builtin_internal_data, ann_custom_CompleteData);
            CompleteStructMember member_internal_data = TypeObjectUtils::build_complete_struct_member(common_internal_data, detail_internal_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_CompleteData, member_internal_data);
        }
        {
            TypeIdentifierPair type_ids_messages;
            ReturnCode_t return_code_messages {eprosima::fastdds::dds::RETCODE_OK};
            return_code_messages =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_Message_2", type_ids_messages);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_messages)
            {
                return_code_messages =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Message", type_ids_messages);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_messages)
                {
                ::register_Message_type_identifier(type_ids_messages);
                }
                bool element_identifier_anonymous_array_Message_2_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_Message_2 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_messages, element_identifier_anonymous_array_Message_2_ec))};
                if (!element_identifier_anonymous_array_Message_2_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_Message_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_messages.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_Message_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_Message_2 = 0;
                PlainCollectionHeader header_anonymous_array_Message_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_Message_2, element_flags_anonymous_array_Message_2);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_Message_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_Message_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_Message_2", type_ids_messages))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_Message_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_messages = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_messages = 0x00000003;
            bool common_messages_ec {false};
            CommonStructMember common_messages {TypeObjectUtils::build_common_struct_member(member_id_messages, member_flags_messages, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_messages, common_messages_ec))};
            if (!common_messages_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure messages member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_messages = "messages";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_messages;
            ann_custom_CompleteData.reset();
            CompleteMemberDetail detail_messages = TypeObjectUtils::build_complete_member_detail(name_messages, member_ann_builtin_messages, ann_custom_CompleteData);
            CompleteStructMember member_messages = TypeObjectUtils::build_complete_struct_member(common_messages, detail_messages);
            TypeObjectUtils::add_complete_struct_member(member_seq_CompleteData, member_messages);
        }
        CompleteStructType struct_type_CompleteData = TypeObjectUtils::build_complete_struct_type(struct_flags_CompleteData, header_CompleteData, member_seq_CompleteData);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_CompleteData, type_name_CompleteData.to_string(), type_ids_CompleteData))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "CompleteData already registered in TypeObjectRegistry for a different type.");
        }
    }
}

