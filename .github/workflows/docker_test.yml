name: docker_test
# (TODO) Change to main branch when PR is merged
on:
  workflow_dispatch:
    inputs:
      fastdds_branch:
        description: 'Branch or tag of Fast DDS repository (https://github.com/eProsima/Fast-DDS)'
        required: true
        default: 'master'
      ddsrecorder_branch:
        description: 'Branch or tag of DDS Recorder repository (https://github.com/eProsima/DDS-Recorder)'
        required: true
        default: 'feature/CI'
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

env:
  REGISTRY: ghcr.io

jobs:
  docker_test:

    runs-on: ubuntu-20.04

    env:
      DEFAULT_FASTDDS_BRANCH: 'master'
      DEFAULT_DDSRECORDER_BRANCH: 'feature/CI'
      DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE: "ddsrecorder:ci"
      DDSRECORDER_COMPOSE_TEST_ROS2_DOCKER_IMAGE: "vulcanexus:ci"

    steps:

      # Sync current branch
      - name: Sync eProsima/DDS-Recorder repository
        uses: actions/checkout@v2
        with:
          path: src/DDS-Recorder

      # Echo Env Var to debug workflow
      - name: Echo env variables
        run: |
          echo "--- Input Variables ---"
          echo "github.event.inputs.fastdds_branch: ${{ github.event.inputs.fastdds_branch }}"
          echo "github.event.inputs.ddsrecorder_branch: ${{ github.event.inputs.ddsrecorder_branch }}"
          echo "--- Github Environment Variables ---"
          echo "github.head_ref: ${{ github.head_ref }}"
          echo "--- Environment Variables ---"
          echo "DEFAULT_FASTDDS_BRANCH: ${{ env.DEFAULT_FASTDDS_BRANCH }}"
          echo "DEFAULT_DDSRECORDER_BRANCH: ${{ env.DEFAULT_DDSRECORDER_BRANCH }}"

      # It enables the use of Vulcanexus container
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build Vulcanexus Docker image
      - name: Build custom Vulcanexus Docker image
        run: |
          cd src/DDS-Recorder/.github/docker/vulcanexus
          docker build \
            --no-cache \
            --build-arg docker_image_base=ghcr.io/eprosima/ubuntu-vulcanexus:humble-core \
            -t ${{ env.DDSRECORDER_COMPOSE_TEST_ROS2_DOCKER_IMAGE }} \
            -f Dockerfile .

      # Build DDS Recorder Docker image
      - name: Build DDS Recorder Docker image
        run: |
          cd src/DDS-Recorder/.github/docker/ddsrecorder
          docker build \
            --no-cache \
            --build-arg fastdds_branch=${{ github.event.inputs.fastdds_branch || env.DEFAULT_FASTDDS_BRANCH }} \
            --build-arg ddsrecorder_branch=${{ github.event.inputs.ddsrecorder_branch || github.head_ref || env.DEFAULT_DDSRECORDER_BRANCH }} \
            -t ${{ env.DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE }} \
            -f Dockerfile .
          echo "DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE: ${{ env.DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE }}"

      # Install colcon and required apt packages
      - name: Install apt packages
        uses: ./src/DDS-Recorder/.github/actions/install-apt-packages

      # Install colcon and required python packages
      - name: Install Python packages
        uses: ./src/DDS-Recorder/.github/actions/install-python-packages

      # Check Docker images exist
      - name: Check if Docker images exist
        run: |
          [ -n "$(docker images -q ${{ env.DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE }})" ] || echo "DDS Recorder Docker image does not exists"
          [ -n "$(docker images -q ${{ env.DDSRECORDER_COMPOSE_TEST_ROS2_DOCKER_IMAGE }})" ] || echo "Vulcanexus image does not exists"

      # Get artifact to use cmake_utils
      - name: Get build eProsima dependencies Job Id
        run: |
          export JOB_ID=$(curl -sL $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/workflows/build_fastdds.yml/runs | \
            jq '.workflow_runs[] | select(.status == "completed") | .id' | \
            head -n 1)
          echo "fastdds_job_id=${JOB_ID}" >> $GITHUB_ENV

      - name: Download eProsima dependencies
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build_fastdds.yml
          path: /home/runner/work/fastdds/install
          name: ubuntu-20.04_fastdds_install
          run_id: ${{ env.fastdds_job_id }}

      # Run ddsrecorder_test compose tests
      - name: Run tests
        run: |
          export DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE=${{ env.DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE }}
          export DDSRECORDER_COMPOSE_TEST_ROS2_DOCKER_IMAGE=${{ env.DDSRECORDER_COMPOSE_TEST_ROS2_DOCKER_IMAGE }}
          source /home/runner/work/fastdds/install/setup.bash
          colcon build --event-handlers console_direct+ --packages-up-to ddsrecorder_test --cmake-args -DBUILD_COMPOSE_TESTS=ON
          colcon test \
            --packages-select ddsrecorder_test \
            --event-handlers console_direct+ \
            --return-code-on-test-failure \
            --ctest-args \
              --label-exclude xfail \
              --timeout 60

      - name: Run flaky tests
        continue-on-error: true
        run: |
          export DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE=${{ env.DDSRECORDER_COMPOSE_TEST_DOCKER_IMAGE }}
          export DDSRECORDER_COMPOSE_TEST_ROS2_DOCKER_IMAGE=${{ env.DDSRECORDER_COMPOSE_TEST_ROS2_DOCKER_IMAGE }}
          colcon build --event-handlers console_direct+ --packages-up-to ddsrecorder_test --cmake-args -DBUILD_COMPOSE_TESTS=ON
          colcon test \
            --packages-select ddsrecorder_test \
            --event-handlers console_direct+ \
            --return-code-on-test-failure \
            --ctest-args \
              --label-regex xfail \
              --timeout 60
